package com.kh.member.model.dao;

import static com.kh.common.JDBCTemplate.close;

import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Properties;

import com.kh.member.model.exception.MemberException;
import com.kh.member.model.vo.Member;

/* 이전 프로젝트에서 Dao가 맡은 업무
1) JDBC드라이버 등록
2) DB 연결 Connection 객체생성
3) SQL 실행
4) 처리결과에 따른 트랜잭션처리(commit, rollback)
5) 자원 반환

이 때, 실제로 dao가 처리해야 업무는 SQL문을 DB로 전달하여 실행하고 반환값을 받아오는
3번의 역할만을 진행해야 함. 
 --> 3번 이외에 1,2,4,5 역할을 분리해야 함.
 
+ 1,2,4,5의 업무는 어디서든 공통적으로 이루어지는 공통 업무
 --> 한번에 묶어서 처리해주자
 --> 공통업무를 처리하기 위한
 com.kh.common.JDBCTemplate 클래스 생성.
*/

public class MemberDAO {
	private Properties prop = null;
	
	public MemberDAO() {
		
		try {
			prop = new Properties();
			prop.load(new FileReader("resources/query.properties"));
			
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	public ArrayList<Member> selectAll(Connection conn) throws MemberException {
		ArrayList<Member> list = null;

		Statement stmt = null;
		ResultSet rset = null;

		String sql = prop.getProperty("selectAll");

		// 1.JDBC driver 등록
		try {

			// 3. 쿼리문을 실행할 statement 객체 생성
			stmt = conn.createStatement();

			// 4. 쿼리문 전송, 실행결과를 ResultSet 으로 받기
			rset = stmt.executeQuery(sql);

			// 5. 받을 결과 값을 객체에 옮겨서 저장하기
			list = new ArrayList<Member>();
			System.out.println(stmt+"rset");
			while (rset.next())// 값이 있으면 true
			{
				Member m = new Member();

				m.setUserId(rset.getString("USERID"));
				m.setPassword(rset.getString("PASSWORD"));
				m.setUserName(rset.getString("USERNAME"));
				m.setGender(rset.getString("GENDER"));
				m.setAge(rset.getInt("AGE"));
				m.setEmail(rset.getString("EMAIL"));
				m.setPhone(rset.getString("PHONE"));
				m.setAddress(rset.getString("ADDRESS"));
				m.setHobby(rset.getString("HOBBY"));
				m.setEnrollDate(rset.getDate("ENROLLDATE"));

				list.add(m);
			}
		} catch (Exception e) {
			//e.printStackTrace();
			throw new MemberException("selectAll에러 : "+e.getMessage());

		} finally {
			close(rset);
			close(stmt);
		}
		return list;
	}

	public Member selectOne(Connection conn, String memberId) throws MemberException {
		Member m = null;
		PreparedStatement pstmt = null;
		ResultSet rset = null;

		//String sql = "SELECT * FROM MEMBER WHERE USERID = ?";
		String sql = prop.getProperty("selectOne");
		try {

			// 3. 쿼리문을 실행할 prepareStatement객체생성
			pstmt = conn.prepareStatement(sql);
			pstmt.setString(1, memberId);

			// 4. 쿼리문 전송, 실행결과를 resultset으로 받기
			rset = pstmt.executeQuery();

			if (rset.next()) {
				m = new Member();

				m.setUserId(rset.getString("USERID"));
				m.setPassword(rset.getString("PASSWORD"));
				m.setUserName(rset.getString("USERNAME"));
				m.setGender(rset.getString("GENDER"));
				m.setAge(rset.getInt("AGE"));
				m.setEmail(rset.getString("EMAIL"));
				m.setPhone(rset.getString("PHONE"));
				m.setAddress(rset.getString("ADDRESS"));
				m.setHobby(rset.getString("HOBBY"));
				m.setEnrollDate(rset.getDate("ENROLLDATE"));
			}
		} catch (Exception e) {
			throw new MemberException("selectOne에러 : "+e.getMessage());
		} finally {
			close(rset);
			close(pstmt);
		}

		return m;
	}

	public int insertMember(Connection conn, Member m) throws MemberException {
		int result = 0;

		PreparedStatement pstmt = null;
		ResultSet rset = null;

		String sql = prop.getProperty("insertMember");

		try {

			// 3. 쿼리문을 실행할 statement객체생성
			pstmt = conn.prepareStatement(sql);

			conn.setAutoCommit(false);

			pstmt.setString(1, m.getUserId());
			pstmt.setString(2, m.getPassword());
			pstmt.setString(3, m.getUserName());
			pstmt.setString(4, m.getGender());
			pstmt.setInt(5, m.getAge());
			pstmt.setString(6, m.getEmail());
			pstmt.setString(7, m.getPhone());
			pstmt.setString(8, m.getAddress());
			pstmt.setString(9, m.getHobby());

			result = pstmt.executeUpdate(); // 처리한 행의 갯수리턴

			
		} catch (Exception e) {
			throw new MemberException("insertMember에러 : "+e.getMessage());
		} finally {
			close(pstmt);
		}

		return result;
	}

	public int updateMember(Connection conn, Member m, String memberId) throws MemberException {
		int result = 0;
		PreparedStatement pstmt = null;
		ResultSet rset = null;


		String sql = prop.getProperty("updateMember");

		try {

			// 3. 쿼리문을 실행할 statement객체생성
			pstmt = conn.prepareStatement(sql);

			pstmt.setString(1, m.getPassword());
			pstmt.setString(2, m.getEmail());
			pstmt.setString(3, m.getPhone());
			pstmt.setString(4, m.getAddress());
			pstmt.setString(5, memberId);

			conn.setAutoCommit(false);
			result = pstmt.executeUpdate(); // 처리한 행의 갯수리턴

			

		} catch (Exception e) {
			throw new MemberException("updateMember에러 : "+e.getMessage());
		} finally {
			close(pstmt);

		}

		return result;

	}

	public int deleteMember(Connection conn, String memberId) throws MemberException {
		int result = 0;
		PreparedStatement pstmt = null;
		ResultSet rset = null;

		String sql = prop.getProperty("deleteMember");

		try {

			// 3. 쿼리문을 실행할 statement객체생성
			pstmt = conn.prepareStatement(sql);
			pstmt.setString(1, memberId);
			conn.setAutoCommit(false);
			result = pstmt.executeUpdate(); // 처리한 행의 갯수리턴

			

		} catch (Exception e) {
			throw new MemberException("deleteMember에러 : "+e.getMessage());
		} finally {
			close(pstmt);

		}

		return result;

	}

	public ArrayList<Member> selectAllDeleteMember(Connection conn) throws MemberException {
		ArrayList<Member> list = null;
		Statement stmt = null;
		ResultSet rset = null;

	
		String sql = prop.getProperty("selectAllDeleteMember");
		// 1.JDBC driver 등록
		try {

			// 3. 쿼리문을 실행할 statement 객체 생성
			stmt = conn.createStatement();

			// 4. 쿼리문 전송, 실행결과를 ResultSet 으로 받기
			rset = stmt.executeQuery(sql);

			// 5. 받을 결과 값을 객체에 옮겨서 저장하기
			list = new ArrayList<Member>();

			while (rset.next())// 값이 있으면 true
			{
				Member m = new Member();

				m.setUserId(rset.getString("USERID"));
				m.setPassword(rset.getString("PASSWORD"));
				m.setUserName(rset.getString("USERNAME"));
				m.setGender(rset.getString("GENDER"));
				m.setAge(rset.getInt("AGE"));
				m.setEmail(rset.getString("EMAIL"));
				m.setPhone(rset.getString("PHONE"));
				m.setAddress(rset.getString("ADDRESS"));
				m.setHobby(rset.getString("HOBBY"));
				m.setEnrollDate(rset.getDate("ENROLLDATE"));

				list.add(m);
			}
		} catch (Exception e) {
			throw new MemberException("selectAllDeleteMember에러 : "+e.getMessage());

		} finally {
			close(rset);
			close(stmt);
		}

		return list;
	}
}
