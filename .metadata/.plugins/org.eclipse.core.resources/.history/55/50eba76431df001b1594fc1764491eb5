package com.kh.product.model.dao;

import static com.kh.common.JDBCTemplate.close;

import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Properties;

import com.kh.product.model.exception.ProductException;
import com.kh.product.model.vo.ProductIO;

public class ProductDAO {
	private Properties prop = null;
	
	public ProductDAO() {
		try {
			prop = new Properties();
			prop.load(new FileReader("resources/query.properties"));
			
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
	}

	public ArrayList<ProductIO> selectAll(Connection conn) throws ProductException {
		ArrayList<ProductIO> list = null;
		Statement stmt = null;
		ResultSet rset = null;
		
		String sql = prop.getProperty("selectAll");
		
		try {
			stmt = conn.createStatement();
			rset = stmt.executeQuery(sql);
			
			list = new ArrayList<ProductIO>();
			while (rset.next())// 값이 있으면 true
			{
				ProductIO p = new ProductIO();
				
				p.setProductId(rset.getString("PRODUCT_ID"));
				p.setpName(rset.getString("P_NAME"));
				p.setPrice(rset.getInt("PRICE"));
				p.setDescription(rset.getString("DESCRIPTION"));
				p.setAmount(rset.getInt("STOCK"));

				list.add(p);
			}
		} catch (Exception e) {
			//e.printStackTrace();
			throw new ProductException("selectAll에러 : "+e.getMessage());

		} finally {
			close(rset);
			close(stmt);
		}
		return list;
	}
	public int insertProduct(Connection conn, ProductIO p) throws ProductException {
		int result = 0;
		
		PreparedStatement pstmt = null;
		ResultSet rset = null;
		
		String sql = prop.getProperty("insertProduct");
		
		try {
			pstmt = conn.prepareStatement(sql);

			conn.setAutoCommit(false);

			
			pstmt.setString(1, p.getProductId());
			pstmt.setString(2, p.getpName());
			pstmt.setInt(3, p.getPrice());
			pstmt.setString(4, p.getDescription());
			pstmt.setInt(5, p.getAmount());
			
			result = pstmt.executeUpdate(); // 처리한 행의 갯수리턴

			
		} catch (Exception e) {
			throw new ProductException("insertProduct에러 : "+e.getMessage());
		} finally {
			close(pstmt);
		}

		return result;
	}
	
	public ArrayList<ProductIO> selectAll2(Connection conn) throws ProductException {
		ArrayList<ProductIO> list = null;
		Statement stmt = null;
		ResultSet rset = null;
		
		String sql = prop.getProperty("selectAll");
		
		try {
			stmt = conn.createStatement();
			rset = stmt.executeQuery(sql);
			
			list = new ArrayList<ProductIO>();
			while (rset.next())// 값이 있으면 true
			{
				ProductIO p = new ProductIO();
				
				p.setIoNum(rset.getInt("IO_NUM"));
				p.setProductId(rset.getString("PRODUCT_ID"));
				p.setpName(rset.getString("P_NAME"));
				p.setIoDate(rset.getDate("IO_DATE"));
				p.setAmount(rset.getInt("AMOUNT"));
				p.setStatus(rset.getString("STATUS"));

				list.add(p);
			}
		} catch (Exception e) {
			//e.printStackTrace();
			throw new ProductException("selectAll에러 : "+e.getMessage());

		} finally {
			close(rset);
			close(stmt);
		}
		return list;
	}

	public ArrayList<ProductIO> selectone(Connection conn) throws ProductException {
		ArrayList<ProductIO> list = null;
		Statement stmt = null;
		ResultSet rset = null;
		
		String sql = prop.getProperty("selectone");
		
		try {
			stmt = conn.createStatement();
			rset = stmt.executeQuery(sql);
			
			list = new ArrayList<ProductIO>();
			while (rset.next())// 값이 있으면 true
			{
				ProductIO p = new ProductIO();
				
				p.setIoNum(rset.getInt("IO_NUM"));
				p.setProductId(rset.getString("PRODUCT_ID"));
				p.setpName(rset.getString("P_NAME"));
				p.setIoDate(rset.getDate("IO_DATE"));
				p.setAmount(rset.getInt("AMOUNT"));
				p.setStatus(rset.getString("STATUS"));

				list.add(p);
			}
		} catch (Exception e) {
			//e.printStackTrace();
			throw new ProductException("selectone에러 : "+e.getMessage());

		} finally {
			close(rset);
			close(stmt);
		}
		return list;
	}

	

	

}
